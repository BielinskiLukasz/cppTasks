//
// Created by Lukasz on 2019-01-26.
//

#include <iostream>

using std::cout, std::endl;

class Osoba {

protected:
    //I. Przygotuj klase Osoba z polami char* imie i int wiek. Nastepnie utwÃ³rz dwa obiekty zdefiniowanej klasy,
    // uzywajac konstruktorÃ³w wykorzystujacych mechanizmy: dynamicznego alokowania pamieci oraz lokalnej definicji.
    char *imie;
    int wiek;

public:
    //II. Rozwin definicje klasy Osoba o konstruktory:
    // pusty â€“ wprowadzajacy wartosci pÃ³l do dynamicznie alokowanych zasobÃ³w,
    // przyjmujacy dwa parametry (char*, int) â€“ inicjujacy pola przez liste inicjacyjna.
    // Oba z konstruktorÃ³w powinny wyswietlic na ekranie informacje o utworzeniu obiektu Osoba. Dodefiniuj destruktor,
    // wyswietlajacy informacje o zniszczeniu obiektu i zwalniajacy dynamicznie za alokowane zasoby. W ciele funkcji
    // main przedstaw tworzenie obiektÃ³w powyzszej klasy z uzyciem obu typÃ³w konstruktorÃ³w.
    Osoba(char *imie, int wiek) : wiek(wiek) {
        //RozwiÄ…zanie problemu, Å¼e po zmianie tablicy dostarczanej jako argument do obiektu zmienia siÄ™ rÃ³wnieÅ¼
        // parametr obiektu (gdyÅ¼ w przypisaniu do tablicy jak wiek tworzono by wskaÅºnik na zewnÄ™trznÄ… tablicÄ™)
        this->imie = copy_name(imie);

        constructor_info();
    }

    void show() {
        cout << imie << endl;
    }

    Osoba() : imie("nobody"), wiek(0) {
        constructor_info();
    }

    ~Osoba() {
        deconstructor_info();
        delete imie;
    }

    //III. Wykorzystujac operator new, utwÃ³rz obiekt klasy Osoba i uzywajac funkcji show wyswietl zawarte w nim pola.
    // UtwÃ³rz odnosnik ref do tego obiektu, a nastepnie utwÃ³rz nowy obiekt klasy Osoba dostarczajac jako parametr
    // konstruktora odnosnika ref. Ponownie wyswietl stany pÃ³l wszystkich utworzonych obiektÃ³w. Usun pierwszy z
    // utworzonych obiektÃ³w i wyswietl stan pÃ³l pozostaÅ‚ego obiektu.
    Osoba(Osoba &o) : wiek(o.wiek) {
        this->imie = copy_name(o.imie);

        constructor_info();
    }

private:
    void constructor_info() {
        cout << imie << " created" << endl;
    }

    void deconstructor_info() {
        cout << imie << " deleted" << endl;
    }

    char *copy_name(char* name) {
        int tmp_size = strlen(name) + 1;
        char *tmp = new char[tmp_size];
        strcpy_s(tmp, tmp_size, name);

        return tmp;
    };
};
